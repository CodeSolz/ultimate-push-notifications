name: Create GitHub Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.3.8

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, intl, dom, curl
          tools: composer:v2

      - name: üì¶ Install dependencies (include vendor)
        run: composer install --no-dev -o

      - name: üè∑Ô∏è Extract version
        id: extract_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: üìù Extract changelog for version
        id: changelog
        run: |
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          HEADER_REGEX="^### Version: ${VERSION}"

          HEADER_LINE=$(grep -m1 "$HEADER_REGEX" "${GITHUB_WORKSPACE}/CHANGELOG.md" | sed 's/^### /## /')
          BODY=$(awk -v header="### Version: ${VERSION}" '
            $0 ~ header {
              capture = 1
              next
            }
            capture && /^### Version:/ {
              exit
            }
            capture { print }
          ' "${GITHUB_WORKSPACE}/CHANGELOG.md")

          if [ -z "$HEADER_LINE" ] || [ -z "$BODY" ]; then
            echo "‚ùå Changelog not found for version $VERSION"
            exit 1
          fi

          echo "CHANGELOG_HEADER<<EOF" >> $GITHUB_ENV
          echo "$HEADER_LINE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "CHANGELOG_BODY<<EOF" >> $GITHUB_ENV
          echo "$BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: üìÅ Prepare ZIP and TAR.GZ with proper structure
        run: |
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          PLUGIN_SLUG="ultimate-push-notifications"
          ZIP_NAME="${PLUGIN_SLUG}.${VERSION}.zip"
          TAR_NAME="${PLUGIN_SLUG}.${VERSION}.tar.gz"

          # üßπ Clean up temp workspace
          rm -rf release-tmp
          mkdir -p release-tmp/${PLUGIN_SLUG}

          echo "üóÇÔ∏è Copying clean files..."
          rsync -av ./ release-tmp/${PLUGIN_SLUG} \
            --exclude=".git" \
            --exclude=".github" \
            --exclude="node_modules" \
            --exclude="build" \
            --exclude="release-tmp" \
            --exclude="${ZIP_NAME}" \
            --exclude="${TAR_NAME}"

          # ‚úÖ Remove build folder if it was created again after rsync
          rm -rf release-tmp/${PLUGIN_SLUG}/build

          # ‚úÖ Ensure vendor is present
          cp -r vendor release-tmp/${PLUGIN_SLUG}/

          # üîç Show copied folder before packaging
          echo "‚úÖ Final contents to be zipped:"
          ls -la release-tmp/${PLUGIN_SLUG}

          echo "üì¶ Creating zip and tar.gz"
          cd release-tmp
          zip -r "../${ZIP_NAME}" "${PLUGIN_SLUG}"
          tar -czf "../${TAR_NAME}" "${PLUGIN_SLUG}"
          cd ..

          # üßº Final clean
          rm -rf release-tmp

          echo "ZIP_NAME=${ZIP_NAME}" >> $GITHUB_ENV
          echo "TAR_NAME=${TAR_NAME}" >> $GITHUB_ENV

      - name: üöÄ Create GitHub Release (with zip and tar.gz)
        uses: softprops/action-gh-release@v1
        with:
          name: Better Find and Replace
          tag_name: v${{ steps.extract_version.outputs.VERSION }}
          body: |
            ${{ env.CHANGELOG_HEADER }}

            ${{ env.CHANGELOG_BODY }}
          files: |
            ${{ env.ZIP_NAME }}
            ${{ env.TAR_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
